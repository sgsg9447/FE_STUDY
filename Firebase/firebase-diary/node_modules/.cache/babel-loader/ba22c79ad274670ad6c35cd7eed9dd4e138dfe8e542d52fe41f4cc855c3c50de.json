{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport { signInWithEmailAndPassword } from \"firebase/auth\";\nimport { appAuth } from \"../firebase/config\";\nimport { useAuthContext } from \"./useAuthContext\";\nexport const useLogin = () => {\n  _s();\n  //에러 정보 저장\n  const [error, setError] = useState(null);\n  //통신상태 저장\n  const [isPending, setIsPending] = useState(false);\n  const {\n    dispatch\n  } = useAuthContext();\n  const login = (email, password) => {\n    setError(null); //아직 에러없기때문에\n    setIsPending(true); //통신을 진행중\n    signInWithEmailAndPassword(appAuth, email, password).then(userCredential => {\n      const user = userCredential.user;\n      dispatch({\n        type: \"login\",\n        payload: user\n      });\n      setError(null);\n      setIsPending(false);\n      if (!user) {\n        throw new Error(\"회원가입에 실패했습니다.\");\n      }\n    }).catch(err => {\n      setError(err.message);\n      setIsPending(false);\n    });\n  };\n  return {\n    error,\n    isPending,\n    login\n  };\n};\n_s(useLogin, \"3CG1RIu6twumuLiIXN29/q7Db+4=\", false, function () {\n  return [useAuthContext];\n});","map":{"version":3,"names":["useState","signInWithEmailAndPassword","appAuth","useAuthContext","useLogin","_s","error","setError","isPending","setIsPending","dispatch","login","email","password","then","userCredential","user","type","payload","Error","catch","err","message"],"sources":["/Users/sseul/Desktop/my-diary2/src/hooks/useLogin.js"],"sourcesContent":["import { useState } from \"react\";\nimport { signInWithEmailAndPassword } from \"firebase/auth\";\nimport { appAuth } from \"../firebase/config\";\nimport { useAuthContext } from \"./useAuthContext\";\nexport const useLogin = () => {\n  //에러 정보 저장\n  const [error, setError] = useState(null);\n  //통신상태 저장\n  const [isPending, setIsPending] = useState(false);\n  const { dispatch } = useAuthContext();\n\n  const login = (email, password) => {\n    setError(null); //아직 에러없기때문에\n    setIsPending(true); //통신을 진행중\n    signInWithEmailAndPassword(appAuth, email, password)\n      .then((userCredential) => {\n        const user = userCredential.user;\n        dispatch({ type: \"login\", payload: user });\n        setError(null);\n        setIsPending(false);\n        if (!user) {\n          throw new Error(\"회원가입에 실패했습니다.\");\n        }\n      })\n      .catch((err) => {\n        setError(err.message);\n        setIsPending(false);\n      });\n  };\n  return { error, isPending, login };\n};\n"],"mappings":";AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,SAASC,0BAA0B,QAAQ,eAAe;AAC1D,SAASC,OAAO,QAAQ,oBAAoB;AAC5C,SAASC,cAAc,QAAQ,kBAAkB;AACjD,OAAO,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC5B;EACA,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGP,QAAQ,CAAC,IAAI,CAAC;EACxC;EACA,MAAM,CAACQ,SAAS,EAAEC,YAAY,CAAC,GAAGT,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM;IAAEU;EAAS,CAAC,GAAGP,cAAc,EAAE;EAErC,MAAMQ,KAAK,GAAGA,CAACC,KAAK,EAAEC,QAAQ,KAAK;IACjCN,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;IAChBE,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC;IACpBR,0BAA0B,CAACC,OAAO,EAAEU,KAAK,EAAEC,QAAQ,CAAC,CACjDC,IAAI,CAAEC,cAAc,IAAK;MACxB,MAAMC,IAAI,GAAGD,cAAc,CAACC,IAAI;MAChCN,QAAQ,CAAC;QAAEO,IAAI,EAAE,OAAO;QAAEC,OAAO,EAAEF;MAAK,CAAC,CAAC;MAC1CT,QAAQ,CAAC,IAAI,CAAC;MACdE,YAAY,CAAC,KAAK,CAAC;MACnB,IAAI,CAACO,IAAI,EAAE;QACT,MAAM,IAAIG,KAAK,CAAC,eAAe,CAAC;MAClC;IACF,CAAC,CAAC,CACDC,KAAK,CAAEC,GAAG,IAAK;MACdd,QAAQ,CAACc,GAAG,CAACC,OAAO,CAAC;MACrBb,YAAY,CAAC,KAAK,CAAC;IACrB,CAAC,CAAC;EACN,CAAC;EACD,OAAO;IAAEH,KAAK;IAAEE,SAAS;IAAEG;EAAM,CAAC;AACpC,CAAC;AAACN,EAAA,CA1BWD,QAAQ;EAAA,QAKED,cAAc;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}